from telebot import types

from config.from_exel_file import text_message
from database.get_data import get_items_basket, get_some_data, get_past_orders, get_all_data


def start_keyboard(message):
    list_buttons = ['ü•°–õ–∞–ø—à–∞',
                    'üçú–°—É–ø—ã',
                    'ü•ó–°–∞–ª–∞—Ç—ã',
                    'üçü–ì–∞—Ä–Ω–∏—Ä—ã',
                    'üçî–ë—É—Ä–≥–µ—Ä—ã',
                    'üç©–°–ª–∞–¥–æ—Å—Ç–∏']

    list_about_buttons = ['‚úâ–ù–∞–ø–∏—Å–∞—Ç—å', '–î–æ—Å—Ç–∞–≤–∫–∞/–æ–ø–ª–∞—Ç–∞', 'ü§†–û –Ω–∞—Å']

    markup = types.InlineKeyboardMarkup(row_width=2)

    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'first_{name}') for name in list_buttons])

    past_orders = len(get_past_orders(message.chat.id))
    # –≤—ã–ø–∞–¥–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω–∞ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞!
    numb_items = len(get_items_basket(message.chat.id))
    if past_orders != 0 and numb_items != 0:
        button_b_po = [f'üì¶–ö–æ—Ä–∑–∏–Ω–∞({numb_items})', '‚úÖ–í—ã–ø. –∑–∞–∫–∞–∑—ã']
        markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'first_{name}') for name in button_b_po])

    elif past_orders != 0:
        button_b_po = ['‚úÖ–í—ã–ø. –∑–∞–∫–∞–∑—ã']
        markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'first_{name}') for name in button_b_po])

    elif numb_items != 0:
        button_basket = [f'üì¶–ö–æ—Ä–∑–∏–Ω–∞({numb_items})']
        markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'first_{name}') for name in button_basket])

    markup.row(*[types.InlineKeyboardButton(text=name, callback_data=f'first_{name}') for name in list_about_buttons])

    admins = [admin[0] for admin in get_all_data('admins', 'user_id')]
    if message.chat.id in admins:
        markup.add(types.InlineKeyboardButton(text='üõ†–ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å', callback_data='first_üõ†–ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å'))

    return markup


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥–∏–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
def buttons_past_order(tuple_orders):
    list_buttons_2 = ['‚óÄ–ú–µ–Ω—é']
    text = '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n'
    list_buttons = []
    for num, order in enumerate(tuple_orders):
        text += f'{num+1} - –ó–∞–∫–∞–∑ ‚Ññ {order[0]} ... {"{:%d.%m.%Y %H:%M}".format(order[1])}\n'
        list_buttons.append(order[0])

    markup = types.InlineKeyboardMarkup(row_width=4)
    markup.add(*[types.InlineKeyboardButton(text=num+1, callback_data=f'PastOrders_{name}') for num, name in enumerate(list_buttons)])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'PastOrders_{name}') for name in list_buttons_2])
    return [text, markup]


def buttons_generator(num, category, call):
    # –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –±–ª—é–¥–∞—Ö
    if category == 'salads':
        end_num = int(text_message(15, 1))
    elif category == 'sup':
        end_num = int(text_message(16, 1))
    elif category == 'noodles':
        end_num = int(text_message(17, 1))
    elif category == 'garnish':
        end_num = int(text_message(18, 1))
    elif category == 'burger':
        end_num = int(text_message(19, 1))
    elif category == 'sweets':
        end_num = int(text_message(20, 1))
    num = int(num)

    if end_num >= 5:  # –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ 5 –∏ –±–æ–ª—å—à–µ
        if num == 2:
            list_buttons = [f'1',
                            f'‚Ä¢ {num} ‚Ä¢',
                            f'{num + 1}',
                            f'{num + 2}',
                            f'{end_num}']

        elif num == end_num - 1:
            list_buttons = [f'1',
                            f'{num - 2}',
                            f'{num - 1}',
                            f'‚Ä¢ {num} ‚Ä¢',
                            f'{end_num}']

        elif num == end_num:
            list_buttons = [f'1',
                            f'{num - 3}',
                            f'{num - 2}',
                            f'{num - 1}',
                            f'‚Ä¢ {num} ‚Ä¢']

        elif num > 2:
            list_buttons = [f'1',
                            f'{num - 1}',
                            f'‚Ä¢ {num} ‚Ä¢',
                            f'{num + 1}',
                            f'{end_num}']

        else:
            list_buttons = [f'‚Ä¢ {num} ‚Ä¢',
                            f'{num + 1}',
                            f'{num + 2}',
                            f'{num + 3}',
                            f'{end_num}']

    elif end_num == 3:  # –ï—Å–ª–∏ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –±–ª—é–¥–∞

        if num == 1:
            list_buttons = [f'‚Ä¢ {num} ‚Ä¢',
                            f'{num + 1}',
                            f'{end_num}']
        elif num == 2:
            list_buttons = [f'{num - 1}',
                            f'‚Ä¢ {num} ‚Ä¢',
                            f'{num + 1}']
        elif num == 3:
            list_buttons = [f'{num - 2}',
                            f'{num - 1}',
                            f'‚Ä¢ {num} ‚Ä¢']

    elif end_num == 4:  # –ï—Å–ª–∏ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ —á–µ—Ç—ã—Ä–µ –±–ª—é–¥–∞
        if num == 1:
            list_buttons = [f'‚Ä¢ {num} ‚Ä¢',
                            f'{num + 1}',
                            f'{num + 2}',
                            f'{end_num}']
        elif num == 2:
            list_buttons = [f'{num - 1}',
                            f'‚Ä¢ {num} ‚Ä¢',
                            f'{num + 1}',
                            f'{end_num}']
        elif num == 3:
            list_buttons = [f'{num - 2}',
                            f'{num - 1}',
                            f'‚Ä¢ {num} ‚Ä¢',
                            f'{num + 1}', ]
        elif num == 4:
            list_buttons = [f'{num - 3}',
                            f'{num - 2}',
                            f'{num - 1}',
                            f'‚Ä¢ {num} ‚Ä¢']

    numb_items = len(get_items_basket(call.message.chat.id))
    if numb_items == 0:
        list_buttons_1 = ['‚è¨–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É']
    else:
        list_buttons_1 = [f'üì¶–ö–æ—Ä–∑–∏–Ω–∞({numb_items})', '‚è¨–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É']

    list_buttons_2 = ['‚óÄ–ú–µ–Ω—é']

    markup = types.InlineKeyboardMarkup(row_width=5)
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'{category}_{name}') for name in list_buttons])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'basket_{name}') for name in list_buttons_1])

    markup.row(*[types.InlineKeyboardButton(text=name, callback_data=f'{category}_{name}') for name in list_buttons_2])

    return markup


# –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
def basket_keyboard():
    list_buttons = ['‚úè–ò–∑–º–µ–Ω–∏—Ç—å', '‚òë–û—Ñ–æ—Ä–º–∏—Ç—å']

    list_buttons_2 = ['‚óÄ–ú–µ–Ω—é']

    markup = types.InlineKeyboardMarkup(row_width=2)

    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'order_{name}') for name in list_buttons])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'order_{name}') for name in list_buttons_2])

    return markup


# –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
def basket_redact_keyboard(list_buttons_del, call):
    list_buttons_del = set(list_buttons_del)
    numb_items = len(get_items_basket(call.message.chat.id))
    if numb_items == 0:
        list_buttons = ['‚óÄ–ú–µ–Ω—é']
    else:
        list_buttons = [f'üì¶–ö–æ—Ä–∑–∏–Ω–∞({numb_items})', '‚óÄ–ú–µ–Ω—é']
    # —á—Ç–æ –± –≤—ã–≤–µ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π

    markup = types.InlineKeyboardMarkup(row_width=1)

    markup.add(*[types.InlineKeyboardButton(text=name.split('_')[0],
                                            callback_data=f"delete_{name.split('_')[1]}_{name.split('_')[2]}") for name
                 in list_buttons_del])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'edit_{name}') for name in list_buttons])

    return markup


# –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
def payment_keyboard():
    list_buttons = ['üíµ–ù–∞–ª–∏—á–Ω—ã–µ', 'üí≥–ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É']
    list_buttons_2 = ['üí∏–û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω']
    list_buttons_3 = ['‚óÄ–ú–µ–Ω—é']

    markup = types.InlineKeyboardMarkup(row_width=2)

    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f"payment1_{name}") for name in list_buttons])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'payment1_{name}') for name in list_buttons_2])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'payment1_{name}') for name in list_buttons_3])

    return markup


# –ö–Ω–æ–ø–∫–∏ –∞–¥—Ä–µ—Å—Å–æ–≤
def address_keyboard(message):
    markup = types.InlineKeyboardMarkup(row_width=3)

    list_address = get_some_data('address', 'address.address', message.chat.id)
    text_forming = '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ —Ä–∞–Ω–Ω–µ–µ –≤–≤–æ–¥–∏–º—ã—Ö –í–∞–º–∏:\n\n'
    list_buttons = []
    for num, button in enumerate(list_address):
        text_forming += f'{num + 1} - {button}\n'
        list_buttons.append(num + 1)
    text_forming += '\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:'
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f"address_{name-1}") for name in list_buttons])

    return [markup, text_forming]


# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–æ–º–Ω–∏—Ç—å –∞–¥—Ä–µ—Å—Å
def remember_address_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton(text='–°–û–•–†–ê–ù–ò–¢–¨', callback_data=f"save_address"))

    return markup


# –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
def past_orders_button():
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons_list= ['‚úÖ–í—ã–ø. –∑–∞–∫–∞–∑—ã', '‚óÄ–ú–µ–Ω—é']
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'first_{name}') for name in buttons_list])

    return markup


# –ö–Ω–æ–ø–∫–∏ –ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏_1
def admin_pan_1_keyboard(status):

    if status == 'ü¶∏‚Äç‚ôÇ–°—É–ø–µ—Ä-–ê–¥–º–∏–Ω':
        list_buttons = ['üïπ–ê–¥–º–∏–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä', 'üôã‚Äç‚ôÇ–ó–∞–∫–∞–∑—ã', '‚Ñπ–ö–ª–∏–µ–Ω—Ç-–∏–Ω—Ñ–æ', 'üìÆ–†–∞—Å—Å—ã–ª–∫–∞', 'üë§–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã' ]

    elif status == 'üë®‚Äçüíª‚Äç–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        list_buttons = ['üôã‚Äç‚ôÇ–ó–∞–∫–∞–∑—ã', '‚Ñπ–ö–ª–∏–µ–Ω—Ç-–∏–Ω—Ñ–æ', 'üìÆ–†–∞—Å—Å—ã–ª–∫–∞']

    elif status == 'üßë‚Äçüé®–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä':
        list_buttons = ['üïπ–ê–¥–º–∏–Ω-–º–µ–Ω–µ–¥–∂–µ—Ä', 'üôã‚Äç‚ôÇ–ó–∞–∫–∞–∑—ã', '‚Ñπ–ö–ª–∏–µ–Ω—Ç-–∏–Ω—Ñ–æ', 'üìÆ–†–∞—Å—Å—ã–ª–∫–∞']

    list_buttons_3 = ['‚óÄ–ú–µ–Ω—é']

    markup = types.InlineKeyboardMarkup(row_width=2)

    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f"admin1_{name}") for name in list_buttons])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'admin1_{name}') for name in list_buttons_3])

    return markup


# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–º–∏–Ω–æ–≤
def admin_manage_keyboard(list_buttons=None, argum = None):
    list_buttons_2 = ['‚ûï–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞']
    list_buttons_3 = ['‚¨Ö–ù–∞–∑–∞–¥', '‚óÄ–ú–µ–Ω—é']

    markup = types.InlineKeyboardMarkup(row_width=2)

    if list_buttons is not None:
        markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f"manageAdmin_{name}") for name in list_buttons])
    if argum is None:
        markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f"manageAdmin_{name}") for name in list_buttons_2])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'manageAdmin_{name}') for name in list_buttons_3])

    return markup


# –ö–Ω–æ–ø–∫–∏ /–¥–æ–±–∞–≤–∏—Ç—å  –∞–¥–º–∏–Ω–æ–≤
def admin_manag_keyboard(list_buttons):
    list_buttons_3 = ['‚¨Ö–ù–∞–∑–∞–¥', '‚óÄ–ú–µ–Ω—é']

    markup = types.InlineKeyboardMarkup(row_width=2)

    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f"manageAdmin_{name}") for name in list_buttons])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'manageAdmin_{name}') for name in list_buttons_3])


# –ö–Ω–æ–ø–∫–∏ —É–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
def new_admin_level(id_new_admin):
    list_buttons = ['ü¶∏‚Äç‚ôÇ–°—É–ø–µ—Ä-–ê–¥–º–∏–Ω', 'üë®‚Äçüíª‚Äç–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'üßë‚Äçüé®–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä']
    list_buttons_3 = ['‚¨Ö–ù–∞–∑–∞–¥', '‚óÄ–ú–µ–Ω—é']

    markup = types.InlineKeyboardMarkup(row_width=2)

    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f"manageRole_{name}_{id_new_admin}") for name in list_buttons])
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'manageRole_{name}') for name in list_buttons_3])

    return markup


# –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ID
def get_user_id_keyboard():
    list_buttons_3 = ['‚¨Ö–ù–∞–∑–∞–¥', '‚óÄ–ú–µ–Ω—é']
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(*[types.InlineKeyboardButton(text=name, callback_data=f'manageRole_{name}') for name in list_buttons_3])

    return markup